#!/usr/bin/python
# -*- coding: utf-8 -*-
"""  Tool description.  """
__author__ = 'luochenxun'
__version__ = '1.0.0'
__name__ = 'py-scaffold'

import getopt
import sys
import re
from sys import argv
import os.path
import locale
import datetime
import shutil
import json
import collections
import pickle
import base64
import time


def usage():
    """ Print the usage as help """
    print("\nGithooker is a extensible tool to hook your git projects. version:%s ." % __version__)
    print("\nUsage: githooker <cmd> [OPTIONS] [param]")
    print("  init                   : init the hook-environment of the project, write the config in githooker.json")
    print("  clean                  : clean the hook-environment of the project, do the reverse job as \'init\'")
    print("  list                   : list the config of the project")
    print("  add  [hookers]         : add a hooker of the project")
    print("  remove [hookers]       : remove a hooker of the project")
    print("  clear                  : clear all the hookers the project")
    print("  make [OPTIONS] [param] : help you to make a githooker plugin in the current dir")
    print("\nfor more infomation of the cmd, you can use option as \'githooker add -h\' for farther help.")
    print("")
    _exit()


""" global variables """
gConfig = None
M_PROJECT_REPOSITORY = "https://github.com/luochenxun/py-scaffold.git"
M_PROJECT_HOME = os.environ['HOME'] + "/.py-scaffold/"
M_PROJECT_SYS_BIN = '/usr/local/bin/'
M_PROJECT_CONFIG = M_PROJECT_HOME + "config.json"
M_PROJECT_MAIN_FILE = M_PROJECT_HOME + __name__


def initEnvironment():
    # if sys.version_info < (3, 3):
    #     _exit("Error, the python version need to be greater than 3.3")
    global gConfig
    gConfig = _readGlobalConfig()
    checkAndAutoUpdate(gConfig)


def checkAndAutoUpdate(globalConfig):
    """ Check update half of day """
    global M_PROJECT_HOME, M_PROJECT_REPOSITORY, M_PROJECT_MAIN_FILE
    global gConfig
    currentTime = int(time.time())
    lastUpdateTime = int(globalConfig["date"])
    HalfOneDay = 20
    if (lastUpdateTime + HalfOneDay) < currentTime:
        # update the src code
        homeDir = os.getcwd()
        os.chdir(M_PROJECT_HOME)
        os.system("git clean -df;git reset --hard HEAD;git pull")
        os.chdir(homeDir)
        # check if githooer has a new update
        mainFile = open(M_PROJECT_MAIN_FILE)
        for line in mainFile:
            match = re.match('__version__ = \'(.+)\'', line)
            if match:
                version = match.group(1)
                versionSplit = version.split('.')
                currentVersionSplit = __version__.split('.')
                if len(versionSplit) != len(currentVersionSplit):
                    _autoUpdate()
                    break
                for i in range(len(versionSplit)):
                    if int(versionSplit[i]) > int(currentVersionSplit[i]):
                        _autoUpdate()
                        break
                    elif int(versionSplit[i]) < int(currentVersionSplit[i]):
                        break
                break
        gConfig["date"] = str(int(time.time()))
        _saveGolbalConfig(gConfig)

def _autoUpdate():
    global M_PROJECT_MAIN_FILE, M_PROJECT_SYS_BIN
    shutil.copy(M_PROJECT_MAIN_FILE, M_PROJECT_SYS_BIN)

def _readGlobalConfig():
    """
    Return the key-value map in config file:
    Config.json
    {
      version: current tool version
      date: the newest time of theck update
    }
    """
    global M_PROJECT_CONFIG
    # default config
    configDic = collections.OrderedDict()
    configDic["version"] = __version__
    configDic["date"] = str(int(time.time()))
    # create a config file if not exists
    if not os.path.exists(M_PROJECT_HOME):
        os.makedirs(M_PROJECT_HOME)
    if not os.path.exists(M_PROJECT_HOME + '.git'):
        shutil.rmtree(M_PROJECT_HOME)
        os.system("git clone " + M_PROJECT_REPOSITORY + ' ' + M_PROJECT_HOME)
    if not os.path.exists(M_PROJECT_CONFIG):
        configWritter = open(M_PROJECT_CONFIG, 'w')
        try:
            configWritter.write(json.dumps(configDic, indent=2))
        finally:
            configWritter.close()
    else:  # read the config
        configReader = open(M_PROJECT_CONFIG, 'r')
        try:
            configText = configReader.read()
            configDic = json.loads(configText, object_pairs_hook=collections.OrderedDict)
        except Exception as e:
            configWritter = open(M_PROJECT_CONFIG, 'w')
            try:
                configWritter.write(json.dumps(configDic, indent=2))
            finally:
                configWritter.close()
        finally:
            configReader.close()
    return configDic


def _saveGolbalConfig(configDic):
    '''
    Save the given dic to the project's golbal config path:
    Config.json
    {
      version: current tool version
      date: the newest time of theck update
    }
    '''
    global M_GITHOOKER_PROJECT_CONFIG
    configWritter = open("./" + M_GITHOOKER_PROJECT_CONFIG, 'w')
    try:
        configWritter.write(json.dumps(configDic, indent=2))
    finally:
        configWritter.close()


def _exit(msg=None):
    if msg != None:
        print(msg)
    os._exit(1)


def _parseArgv():
    """
    pass the cmd & options of the command
    """
    if len(sys.argv) <= 1:
        usage()
        sys.exit(0)
    try:
        cmd = _parseCmd(sys.argv[1], [
            "update", "hook", "init", "clean", "list", "add", "remove", "clear", "make"
        ])
        opts, args = getopt.getopt(sys.argv[1:], "hv", ["help", "version"])
    except getopt.GetoptError as err:
        print(str(err))
        usage()

    try:
        if cmd:
            print("go")
            # if cmd == "hook":
            #     hookEntry(sys.argv[2:])
            # if cmd == "init":
            #     initEntry()
            # if cmd == "clean":
            #     cleanEntry()
            # if cmd == "list":
            #     listEntry()
            # if cmd == "add":
            #     addEntry(sys.argv[2:])
            # if cmd == "remove":
            #     removeEntry(sys.argv[2:])
            # if cmd == "clear":
            #     clearEntry()
            # if cmd == "make":
            #     makeEntry(sys.argv[2:])
            # if cmd == "update":
            #     updateGithooker()
        else:
            if not opts:
                usage()
            for o, a in opts:
                if o in ("-h", "--help"):
                    usage()
                if o in ("-v", "--version"):
                    print(__version__)
                    return
    except ValueError as err:
        print(str(err))
        usage()


def _parseCmd(arg, cmds):
    for c in cmds:
        if arg == c:
            return arg
    return None


# you can run the functions of the module or some test methods here
def main():
    # check arguments
    initEnvironment()
    # _parseArgv()


if __name__ == "__main__":
    main()
